"use client";

import { useEffect, useState } from "react";
import {
  Calendar,
  TrendingUp,
  TrendingDown,
  Minus,
  Clock,
  AlertCircle,
  ChevronDown,
  ChevronUp,
  X,
} from "lucide-react";
// Í∏àÏúµ Ï∫òÎ¶∞Îçî Í¥ÄÎ†® ÌÉÄÏûÖÍ≥º APIÎäî ÏÇ≠Ï†úÎê® - Ïª¥Ìè¨ÎÑåÌä∏Îßå Ïú†ÏßÄ

// Í∏àÏúµ ÏùºÏ†ï ÏïÑÏù¥ÌÖú ÌÉÄÏûÖ Ï†ïÏùò
interface FinancialScheduleItem {
  date: string; // Î∞úÌëú ÎÇ†Ïßú (YYYY-MM-DD)
  dayOfWeek: string; // ÏöîÏùº
  time: string; // Î∞úÌëú ÏãúÍ∞Ñ
  indicator: string; // ÏßÄÌëúÎ™Ö
  importance: string; // Ï§ëÏöîÎèÑ
  country: string; // Íµ≠Í∞Ä
  previous?: string; // Ïù¥Ï†Ñ Í∞í
  forecast?: string; // ÏòàÏÉÅ Í∞í
}

// Í∏àÏúµ Ï∫òÎ¶∞Îçî Ïª¥Ìè¨ÎÑåÌä∏ Props
interface FinancialCalendarProps {
  className?: string;
  isCollapsed?: boolean;
  onToggle?: () => void;
  onClose?: () => void;
}

export function FinancialCalendar({
  className = "",
  isCollapsed = false,
  onToggle,
  onClose,
}: FinancialCalendarProps) {
  const [indicators, setIndicators] = useState<FinancialScheduleItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isRealData, setIsRealData] = useState<boolean>(false);

  useEffect(() => {
    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï (Ïã§Ï†ú API Ïó∞ÎèôÏù¥ ÏÇ≠Ï†úÎêòÏñ¥ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Îßå ÌëúÏãú)
    setLoading(true);

    // ÎçîÎØ∏ Í∏àÏúµ ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞ (Ïõî~Í∏à Ï£ºÍ∞Ñ ÏùºÏ†ï)
    const dummyIndicators: FinancialScheduleItem[] = [
      // ÏõîÏöîÏùº
      {
        date: "2025-09-29",
        dayOfWeek: "ÏõîÏöîÏùº",
        time: "08:00",
        indicator: "ÏÇ∞ÏóÖÏÉùÏÇ∞ÏßÄÏàò (Industrial Production Index)",
        importance: "high",
        country: "ÌïúÍµ≠",
        forecast: "Ï†ÑÏõî ÎåÄÎπÑ 0.5%",
        previous: "Ï†ÑÏõî ÎåÄÎπÑ -0.3%",
      },
      {
        date: "2025-09-29",
        dayOfWeek: "ÏõîÏöîÏùº",
        time: "09:30",
        indicator: "Ï†úÏ°∞ÏóÖ Íµ¨Îß§Í¥ÄÎ¶¨ÏûêÏßÄÏàò (Manufacturing PMI)",
        importance: "medium",
        country: "ÌïúÍµ≠",
        forecast: "48.2",
        previous: "47.8",
      },
      {
        date: "2025-09-29",
        dayOfWeek: "ÏõîÏöîÏùº",
        time: "14:00",
        indicator: "ÏÜåÎß§ÌåêÎß§ (Retail Sales)",
        importance: "low",
        country: "ÌïúÍµ≠",
        forecast: "Ï†ÑÏõî ÎåÄÎπÑ 1.2%",
        previous: "Ï†ÑÏõî ÎåÄÎπÑ 0.8%",
      },

      // ÌôîÏöîÏùº
      {
        date: "2025-09-30",
        dayOfWeek: "ÌôîÏöîÏùº",
        time: "08:00",
        indicator: "Ïã§ÏóÖÎ•† (Unemployment Rate)",
        importance: "medium",
        country: "ÌïúÍµ≠",
        forecast: "2.4%",
        previous: "2.5%",
      },
      {
        date: "2025-09-30",
        dayOfWeek: "ÌôîÏöîÏùº",
        time: "10:00",
        indicator: "ÏÜåÎπÑÏûêÏã†Î¢∞ÏßÄÏàò (Consumer Confidence)",
        importance: "low",
        country: "ÌïúÍµ≠",
        forecast: "95.5",
        previous: "94.2",
      },

      // ÏàòÏöîÏùº
      {
        date: "2025-10-01",
        dayOfWeek: "ÏàòÏöîÏùº",
        time: "08:00",
        indicator: "ÏÜåÎπÑÏûêÎ¨ºÍ∞ÄÏßÄÏàò (CPI)",
        importance: "high",
        country: "ÌïúÍµ≠",
        forecast: "Ï†ÑÎÖÑ ÎåÄÎπÑ 2.5%",
        previous: "Ï†ÑÎÖÑ ÎåÄÎπÑ 2.3%",
      },
      {
        date: "2025-10-01",
        dayOfWeek: "ÏàòÏöîÏùº",
        time: "08:00",
        indicator: "ÏÉùÏÇ∞ÏûêÎ¨ºÍ∞ÄÏßÄÏàò (PPI)",
        importance: "medium",
        country: "ÌïúÍµ≠",
        forecast: "Ï†ÑÎÖÑ ÎåÄÎπÑ 3.1%",
        previous: "Ï†ÑÎÖÑ ÎåÄÎπÑ 2.9%",
      },
      {
        date: "2025-10-01",
        dayOfWeek: "ÏàòÏöîÏùº",
        time: "11:00",
        indicator: "Î¨¥Ïó≠ÏàòÏßÄ (Trade Balance)",
        importance: "high",
        country: "ÌïúÍµ≠",
        forecast: "25Ïñµ Îã¨Îü¨ ÌùëÏûê",
        previous: "22Ïñµ Îã¨Îü¨ ÌùëÏûê",
      },

      // Î™©ÏöîÏùº
      {
        date: "2025-10-02",
        dayOfWeek: "Î™©ÏöîÏùº",
        time: "08:00",
        indicator: "ÏàòÏ∂úÏûÖ ÎèôÌñ• (Export/Import)",
        importance: "high",
        country: "ÌïúÍµ≠",
        forecast: "ÏàòÏ∂ú +5.2%",
        previous: "ÏàòÏ∂ú +3.8%",
      },
      {
        date: "2025-10-02",
        dayOfWeek: "Î™©ÏöîÏùº",
        time: "09:00",
        indicator: "Í∏∞ÏóÖÍ≤ΩÍ∏∞Ïã§ÏÇ¨ÏßÄÏàò (BSI)",
        importance: "low",
        country: "ÌïúÍµ≠",
        forecast: "78.5",
        previous: "76.3",
      },

      // Í∏àÏöîÏùº
      {
        date: "2025-10-03",
        dayOfWeek: "Í∏àÏöîÏùº",
        time: "08:00",
        indicator: "Íµ≠ÎÇ¥Ï¥ùÏÉùÏÇ∞ (GDP) Ïû†Ï†ïÏπò",
        importance: "high",
        country: "ÌïúÍµ≠",
        forecast: "Ï†ÑÍ∏∞ ÎåÄÎπÑ 0.7%",
        previous: "Ï†ÑÍ∏∞ ÎåÄÎπÑ 0.6%",
      },
      {
        date: "2025-10-03",
        dayOfWeek: "Í∏àÏöîÏùº",
        time: "10:30",
        indicator: "Ïô∏ÌôòÎ≥¥Ïú†Ïï° (Foreign Reserves)",
        importance: "medium",
        country: "ÌïúÍµ≠",
        forecast: "4,250Ïñµ Îã¨Îü¨",
        previous: "4,230Ïñµ Îã¨Îü¨",
      },
    ];

    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
    setTimeout(() => {
      setIndicators(dummyIndicators);
      setIsRealData(false); // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ÏûÑÏùÑ ÌëúÏãú
      setLoading(false);
    }, 1000); // Î°úÎî© Ìö®Í≥ºÎ•º ÏúÑÌïú ÏßÄÏó∞
  }, []);

  const isToday = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    return date.toDateString() === today.toDateString();
  };

  // Ï§ëÏöîÎèÑ ÏïÑÏù¥ÏΩò Î∞è ÏÉâÏÉÅ
  const getImportanceIcon = (importance: string) => {
    switch (importance) {
      case "high":
        return "üî¥";
      case "medium":
        return "üü†";
      case "low":
        return "üü¢";
      default:
        return "üü¢";
    }
  };

  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case "high":
        return "text-red-600 dark:text-red-400";
      case "medium":
        return "text-orange-600 dark:text-orange-400";
      case "low":
        return "text-green-600 dark:text-green-400";
      default:
        return "text-green-600 dark:text-green-400";
    }
  };

  // ÎÇ†ÏßúÎ≥Ñ Í∑∏Î£πÌïë
  const groupIndicatorsByDate = (indicators: FinancialScheduleItem[]) => {
    const grouped: { [key: string]: FinancialScheduleItem[] } = {};
    indicators.forEach((indicator) => {
      const dateKey = indicator.date;
      if (!grouped[dateKey]) {
        grouped[dateKey] = [];
      }
      grouped[dateKey].push(indicator);
    });
    return grouped;
  };

  const groupedIndicators = groupIndicatorsByDate(indicators);

  const formatDateHeader = (dateString: string) => {
    const date = new Date(dateString);
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const dayOfWeek = date.toLocaleDateString("ko-KR", { weekday: "short" });

    // ÏöîÏùº ÌïúÍ∏Ä Î≥ÄÌôò
    const dayNames: { [key: string]: string } = {
      Ïõî: "Ïõî",
      Ìôî: "Ìôî",
      Ïàò: "Ïàò",
      Î™©: "Î™©",
      Í∏à: "Í∏à",
      ÌÜ†: "ÌÜ†",
      Ïùº: "Ïùº",
    };

    return `${month}Ïõî ${day}Ïùº (${dayNames[dayOfWeek] || dayOfWeek})`;
  };

  const renderIndicator = (indicator: FinancialScheduleItem, index: number) => {
    const importanceIcon = getImportanceIcon(indicator.importance);
    const importanceColor = getImportanceColor(indicator.importance);

    return (
      <div
        key={`${indicator.date}-${indicator.indicator}-${index}`}
        className={`flex items-center gap-3 p-3 rounded-lg border transition-all duration-200 hover:shadow-sm ${
          isToday(indicator.date)
            ? "bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-700"
            : "bg-white/90 border-gray-100 dark:bg-gray-800/50 dark:border-gray-700"
        } hover:bg-gray-50 dark:hover:bg-gray-700/50`}
      >
        {/* Í≥†Ï†ïÎêú ÏãúÍ∞Ñ (Ï¢åÏ∏°) */}
        <div className="flex-shrink-0 w-12 text-center">
          <div className="text-sm font-bold text-gray-900 dark:text-gray-100 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
            {indicator.time}
          </div>
        </div>

        {/* Íµ¨Î∂ÑÏÑ† */}
        <div className="w-px h-8 bg-gray-200 dark:bg-gray-600"></div>

        {/* ÏßÄÌëú Ï†ïÎ≥¥ */}
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-1">
            <h4 className="font-semibold text-sm text-gray-900 dark:text-gray-100 truncate">
              {indicator.indicator}
            </h4>
            <span
              className="text-sm"
              title={`Ï§ëÏöîÎèÑ: ${
                indicator.importance === "high"
                  ? "ÎÜíÏùå"
                  : indicator.importance === "medium"
                  ? "Ï§ëÍ∞Ñ"
                  : "ÎÇÆÏùå"
              }`}
            >
              {importanceIcon}
            </span>
          </div>
          <div className="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
            <span className="font-mono font-medium text-gray-900 dark:text-gray-100">
              {indicator.forecast || "ÏòàÏ∏°Ïπò ÏóÜÏùå"}
            </span>
            {indicator.previous && (
              <span className="text-gray-500 dark:text-gray-500">
                (Ïù¥Ï†Ñ: {indicator.previous})
              </span>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderDateGroup = (
    dateString: string,
    indicators: FinancialScheduleItem[]
  ) => {
    const isDateToday = isToday(dateString);

    return (
      <div key={dateString} className="mb-4">
        {/* ÎÇ†Ïßú Ìó§Îçî */}
        <div
          className={`text-sm font-semibold mb-2 px-2 py-1 rounded ${
            isDateToday
              ? "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20"
              : "text-gray-700 dark:text-gray-300"
          }`}
        >
          {formatDateHeader(dateString)}
        </div>

        {/* ÏùºÏ†ï Î¶¨Ïä§Ìä∏ */}
        <div className="space-y-2">
          {indicators.map((indicator, index) =>
            renderIndicator(indicator, index)
          )}
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div
        className={`bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm rounded-lg border border-gray-200 dark:border-gray-700 p-3 ${className}`}
      >
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-bold text-gray-900 dark:text-gray-100">
            üìÖ Í∏àÏúµ Ï∫òÎ¶∞Îçî
          </h3>
          {onToggle && (
            <button
              onClick={onToggle}
              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
            >
              {isCollapsed ? (
                <ChevronDown className="w-3 h-3" />
              ) : (
                <ChevronUp className="w-3 h-3" />
              )}
            </button>
          )}
        </div>
        <div className="space-y-1">
          {[1, 2, 3].map((i) => (
            <div
              key={i}
              className="flex items-center gap-3 p-3 rounded-lg border border-gray-100 dark:border-gray-700 animate-pulse bg-white/90 dark:bg-gray-800/50"
            >
              <div className="flex-shrink-0 w-12 text-center">
                <div className="text-sm font-bold text-gray-400 dark:text-gray-500 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
                  08:00
                </div>
              </div>
              <div className="w-px h-8 bg-gray-200 dark:bg-gray-600"></div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                  <div className="h-3 w-3 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
                </div>
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div
        className={`bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm rounded-lg border border-red-200 dark:border-red-700 p-3 ${className}`}
      >
        <div className="text-center py-4">
          <AlertCircle className="w-8 h-8 text-red-500 mx-auto mb-2" />
          <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div
      className={`bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm rounded-lg border border-gray-200 dark:border-gray-700 p-3 shadow-lg ${className} ${
        isCollapsed ? "w-12" : "w-80"
      } transition-all duration-300`}
    >
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <h3
            className={`font-bold text-gray-900 dark:text-gray-100 ${
              isCollapsed ? "text-xs" : "text-sm"
            }`}
          >
            üìÖ Í∏àÏúµ Ï∫òÎ¶∞Îçî
          </h3>
          {/* Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú ÌëúÏãú */}
          {!isCollapsed && (
            <div className="flex items-center gap-1">
              {isRealData ? (
                <div className="flex items-center gap-1 text-green-600 dark:text-green-400">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-xs">Ïã§Ï†ú</span>
                </div>
              ) : (
                <div className="flex items-center gap-1 text-gray-500 dark:text-gray-400">
                  <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                  <span className="text-xs">Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
                </div>
              )}
            </div>
          )}
        </div>
        <div className="flex items-center gap-1">
          {onToggle && (
            <button
              onClick={onToggle}
              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            >
              {isCollapsed ? (
                <ChevronUp className="w-3 h-3" />
              ) : (
                <ChevronDown className="w-3 h-3" />
              )}
            </button>
          )}
          {onClose && (
            <button
              onClick={onClose}
              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            >
              <X className="w-3 h-3" />
            </button>
          )}
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-1 max-h-96 overflow-y-auto">
          {Object.keys(groupedIndicators).length > 0 ? (
            Object.entries(groupedIndicators)
              .sort(
                ([dateA], [dateB]) =>
                  new Date(dateA).getTime() - new Date(dateB).getTime()
              )
              .map(([dateString, indicators]) =>
                renderDateGroup(dateString, indicators)
              )
          ) : (
            <div className="text-center py-8">
              <Calendar className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                Ïù¥Î≤à Ï£º Í∏àÏúµ ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.
              </p>
              <p className="text-xs text-gray-400 dark:text-gray-500">
                Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.
              </p>
            </div>
          )}
        </div>
      )}

      {isCollapsed && Object.keys(groupedIndicators).length > 0 && (
        <div className="flex flex-col items-center gap-1">
          <div className="w-2 h-2 bg-red-500 rounded-full"></div>
          <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
          <div className="w-2 h-2 bg-green-500 rounded-full"></div>
        </div>
      )}
    </div>
  );
}
